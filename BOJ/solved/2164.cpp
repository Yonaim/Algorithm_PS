/*
- 카드의 수가 줄어드는 것은 카드를 버릴 때 뿐임
- 처음에는 홀수 카드만 버려지나?싶었지만 1장이 남을 때까지 이 과정을 반복하기 때문에
	초반엔 홀수 카드들만 버려지다가 짝수만 남게되면 이제 짝수가 버려지기 시작할 것임
- 일단, 홀수 카드가 먼저 다 사라지고 짝수만 남게된다는 건 확실함.
	N = 짝수라면 2, 4, 6 ...N이 남고
	N = 홀수라면 2, 4, 6 ... N - 1이 남게됨.

- 제일 위에 있는 카드를 제일 아래에 있는 카드 밑으로 옮긴다는 점에서 원형 큐가 생각났는데,
	중간 원소를 버리는 과정이 있기 때문에 배열로 구현하면 오히려 복잡하게 됨
- 연결리스트로 큐를 구현하면 될 듯
*/

/*
앗 잠만.......원형 큐가 아니라 그냥 큐 사용하면 될 것 같은데? 그러니까,

맨 위에 있는(front) 원소를 버리는 거 -> dequeue
맨 위에 있는(front) 원소를 제일 아래로 옮기는 거 -> dequeue + enqueue

내가 너무 문제를 복잡하게 생각했구만.
*/

#include <stdio.h>
#include <queue>

int main()
{
	int N;
	std::queue<int> Q;
	int move;

	scanf("%d", &N);
	for (int i = 1; i <= N; i++)
		Q.push(i);

	while (Q.size() > 1)
	{
		Q.pop();
		move = Q.front();
		Q.pop();
		Q.push(move);
	}
	printf("%d\n", Q.front());
}